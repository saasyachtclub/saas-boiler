# SaaS Better - Next.js 15 Boilerplate Rules

## Project Overview
This is a modern SaaS boilerplate built with Next.js 15, React 19, Better Auth, Stripe, Neon, and Drizzle ORM. It follows the App Router pattern and includes everything needed to build and deploy a production-ready SaaS application.

## Architecture
- **Frontend**: Next.js 15 with App Router
- **Authentication**: Better Auth with role-based access
- **Database**: Drizzle ORM + Neon PostgreSQL
- **Payments**: Stripe integration
- **Styling**: Tailwind CSS + shadcn/ui
- **Linting**: Biome
- **Deployment**: Vercel

## Code Style Guidelines

### TypeScript
- Use strict TypeScript configuration
- Define proper types for all data structures
- Use interface over type when possible for objects
- Export types from dedicated type files

### React Components
- Use functional components with hooks
- Implement proper TypeScript interfaces for props
- Use custom hooks for shared logic
- Follow the component composition pattern

### Database
- Use Drizzle ORM for all database operations
- Define schemas in dedicated files
- Use relations for complex queries
- Implement proper error handling

### Authentication
- Use Better Auth for authentication
- Implement role-based access control
- Protect routes at the server level
- Handle session management properly

### Styling
- Use Tailwind CSS for styling
- Leverage shadcn/ui components
- Follow the design system
- Implement responsive design

## File Structure
```
src/
├── app/                    # Next.js App Router pages
├── components/            # Reusable components
│   ├── ui/               # shadcn/ui components
│   ├── admin/            # Admin-specific components
│   └── auth/             # Authentication components
├── lib/                  # Utility libraries
│   ├── auth/             # Authentication configuration
│   ├── db/               # Database configuration
│   ├── schemas/          # Zod validation schemas
│   └── stripe/           # Stripe configuration
├── hooks/                # Custom React hooks
└── types/                # TypeScript type definitions
```

## API Routes
- Use server components when possible
- Implement proper error handling
- Use Zod for request validation
- Follow RESTful conventions

## Environment Variables
- Use proper naming conventions
- Document all required variables
- Provide example values
- Handle missing variables gracefully

## Testing
- Write tests for critical functionality
- Use Vitest for testing
- Implement proper test setup
- Follow testing best practices

## Performance
- Optimize images and assets
- Use proper caching strategies
- Implement code splitting
- Monitor bundle size

## Security
- Implement proper authentication
- Use HTTPS in production
- Sanitize user input
- Follow security best practices

## Deployment
- Use Vercel for deployment
- Implement proper environment variables
- Set up monitoring and logging
- Follow deployment best practices

## Git Workflow
- Use conventional commits
- Follow feature branch workflow
- Implement proper PR reviews
- Use semantic versioning

## Documentation
- Keep README updated
- Document API endpoints
- Provide setup instructions
- Include troubleshooting guides